sample(1:ncol(post$a_player), size = 1)
#extract samples from posterior for all parameters
post <- extract.samples(m.3.b)
#generate empty data frame to store simulated data
df_guess <- data.frame(id = 1:200, competition = c(rep(0, 100), rep(1, 100)),
effort = c(rep(0, 50), rep(1, 50), rep(0, 50), rep(1, 50)),
a_player = NA, a = NA, n_major.s = NA, Correct_Guess = NA)
#extract number of observations per participant, for effort and no effort conditions
g_num_e <- aggregate(Guess_Number ~ ID_Player, data=data.c[data.c$Effort==1,], FUN=max)
g_num_e <- g_num_e$Guess_Number
g_num_noe <- aggregate(Guess_Number ~ ID_Player, data=data.c[data.c$Effort==0,], FUN=max)
g_num_noe <- g_num_noe$Guess_Number
#extract samples from posterior for all parameters
post <- extract.samples(m.3.b)
#generate multiple observations per participant
df_guess$nobs <- NA
#separate data frames into effort and no effort
df_guess_e <- df_guess[df_guess$effort==0,]
df_guess_noe <- df_guess[df_guess$effort==1,]
#repeat observations in effort and no effort conditions based on number of observations in original data set
df_guess_e$nobs <- sample(g_num_e, size = nrow(df_guess_e), replace = TRUE)
df_guess_noe$nobs <- sample(g_num_noe, size = nrow(df_guess_noe), replace = TRUE)
df_guess <- rbind(df_guess_e, df_guess_noe)
n.times <- df_guess$nobs
df_guess_full <- df_guess[rep(seq(1, nrow(df_guess)), n.times),] #full empty data frame, with varying numbers of obs per participant
#generate n_major.s values for each problem that a participant solves and store in the full data
df_guess_full$n_major.s <- sample(data.c$n_major.s, size = nrow(df_guess_full), replace = TRUE)
#generate global intercept values
df_guess_full$a <- sample(post$a, size = nrow(df_guess_full), replace = TRUE)
#generate intercept values for each player
df_guess_list <- list()
for(i in 1:200) {
#subset data set for each unique participant
a <- df_guess_full[df_guess_full$id==i,]
#generate unique intercept values for that participant
unique_int <- sample(1:ncol(post$a_player), size = 1)
intercepts <- sample(post$a_player[,unique_int], size = nrow(a), replace = TRUE)
a$a_player <- intercepts
df_guess_list[[i]] <- a
}
#combine into full data set
df_guess_full <- do.call(rbind, df_guess_list)
#generate simulated data for all 200 participants, for the probability that they get each problem correct
df_guess_full$probc <- NA
nrow(df_guess_full)
#removing already compiled model
rm(list=ls(m.3.b))
#removing already compiled model
rm(m.3.b)
#removing already compiled model
rm(c(m.3.b, m.3.power))
rm(m.3.power)
m.3.b <- map2stan(
alist(
Correct_Guess ~ dbinom(1, theta),
logit(theta) <- a + a_player[ID_Player] + bC*Competition + bE*Effort + bCE*Competition*Effort + bNs*n_major.s,
bC ~ dnorm(0, 10),
bE ~ dnorm(0, 10),
bCE ~ dnorm(0, 10),
bNs ~ dnorm(0, 10),
a ~ dnorm(0, 10),
a_player[ID_Player] ~ dnorm(0, sigma_player),
sigma_player ~ dgamma(1.5, 0.05)
), data=data.c, iter=7500, chains=4, cores = 4, warmup=1000)
2 + 2
ropelow <- -0.2
ropehigh <- 0.2
df_rope_time <- data.frame(c_outside = rep(0, 200), e_outside = rep(0, 200), ce_outside = rep(0, 200),
c_inside = rep(0, 200), e_inside = rep(0, 200), ce_inside = rep(0, 200))
#####
#Effect of competition and effort on time ntil guessing
####
rm(m.1.b)
m.1.b <- map2stan(
alist(
ElapsedTime_Guess ~ dnorm(mu, sigma),
mu <- a + a_player[ID_Player] + bC*Competition + bE*Effort + bCE*Competition*Effort + bNs*n_major.s,
bC ~ dnorm(0, 10),
bE ~ dnorm(0, 30),
bCE ~ dnorm(0, 10),
bNs ~ dnorm(0, 10),
a ~ dgamma(1.5, 0.05),
a_player[ID_Player] ~ dnorm(0, sigma_player),
sigma_player ~ dgamma(1.5, 0.05),
sigma ~ dgamma(2, 0.5)
), data=data.c, iter=7500, chains=4, cores = 4, warmup=1000)
nrow(df_guess_full)
plot(m.1.b)
#generate empty data frame to store simulated data
df_guess <- data.frame(id = 1:200, competition = c(rep(0, 100), rep(1, 100)),
effort = c(rep(0, 50), rep(1, 50), rep(0, 50), rep(1, 50)),
a_player = NA, a = NA, n_major.s = NA, ElapsedTime_Guess = NA)
#extract number of observations per participant, for effort and no effort conditions
g_num_e <- aggregate(Guess_Number ~ ID_Player, data=data.c[data.c$Effort==1,], FUN=max)
g_num_e <- g_num_e$Guess_Number
g_num_noe <- aggregate(Guess_Number ~ ID_Player, data=data.c[data.c$Effort==0,], FUN=max)
g_num_noe <- g_num_noe$Guess_Number
#extract samples from posterior for all parameters
post <- extract.samples(m.1.b)
#generate multiple observations per participant
df_guess$nobs <- NA
#separate data frames into effort and no effort
df_guess_e <- df_guess[df_guess$effort==0,]
df_guess_noe <- df_guess[df_guess$effort==1,]
#repeat observations in effort and no effort conditions based on number of observations in original data set
df_guess_e$nobs <- sample(g_num_e, size = nrow(df_guess_e), replace = TRUE)
df_guess_noe$nobs <- sample(g_num_noe, size = nrow(df_guess_noe), replace = TRUE)
df_guess <- rbind(df_guess_e, df_guess_noe)
n.times <- df_guess$nobs
df_guess_full <- df_guess[rep(seq(1, nrow(df_guess)), n.times),] #full empty data frame, with varying numbers of obs per participant
#generate n_major.s values for each problem that a participant solves and store in the full data
df_guess_full$n_major.s <- sample(data.c$n_major.s, size = nrow(df_guess_full), replace = TRUE)
#generate global intercept values
df_guess_full$a <- sample(post$a, size = nrow(df_guess_full), replace = TRUE)
#generate intercept values for each player
df_guess_list <- list()
for(i in 1:200) {
#subset data set for each unique participant
a <- df_guess_full[df_guess_full$id==i,]
#generate unique intercept values for that participant
unique_int <- sample(1:ncol(post$a_player), size = 1)
intercepts <- sample(post$a_player[,unique_int], size = nrow(a), replace = TRUE)
a$a_player <- intercepts
df_guess_list[[i]] <- a
}
#combine into full data set
df_guess_full <- do.call(rbind, df_guess_list)
#generate simulated data for all 200 participants, for the probability that they get each problem correct
df_guess_full$probc <- NA
for(i in 1:nrow(df_guess_full)) {
df_guess_full$ElapsedTime_Guess[i] <- df_guess_full$a[i] + df_guess_full$a_player[i] + post$bC[i]*df_guess_full$competition[i] +
post$bE[i]*df_guess_full$effort[i] + post$bCE[i]*df_guess_full$competition[i]*df_guess_full$effort[i] +
post$bNs[i]*df_guess_full$n_major.s[i]
}
#analyze data
df <- df_guess_full[,c("id", "competition", "effort", "n_major.s", "ElapsedTime_Guess")]
dens(df$ElapsedTime_Guess)
par(mfrow=c(1,1))
dens(df$ElapsedTime_Guess)
hist(df$ElapsedTime_Guess)
#generate empty data frame to store simulated data
df_guess <- data.frame(id = 1:200, competition = c(rep(0, 100), rep(1, 100)),
effort = c(rep(0, 50), rep(1, 50), rep(0, 50), rep(1, 50)),
a_player = NA, a = NA, n_major.s = NA, ElapsedTime_Guess = NA)
#extract number of observations per participant, for effort and no effort conditions
g_num_e <- aggregate(Guess_Number ~ ID_Player, data=data.c[data.c$Effort==1,], FUN=max)
g_num_e <- g_num_e$Guess_Number
g_num_noe <- aggregate(Guess_Number ~ ID_Player, data=data.c[data.c$Effort==0,], FUN=max)
g_num_noe <- g_num_noe$Guess_Number
#extract samples from posterior for all parameters
post <- extract.samples(m.1.b)
#generate multiple observations per participant
df_guess$nobs <- NA
#separate data frames into effort and no effort
df_guess_e <- df_guess[df_guess$effort==0,]
df_guess_noe <- df_guess[df_guess$effort==1,]
#repeat observations in effort and no effort conditions based on number of observations in original data set
df_guess_e$nobs <- sample(g_num_e, size = nrow(df_guess_e), replace = TRUE)
df_guess_noe$nobs <- sample(g_num_noe, size = nrow(df_guess_noe), replace = TRUE)
df_guess <- rbind(df_guess_e, df_guess_noe)
n.times <- df_guess$nobs
df_guess_full <- df_guess[rep(seq(1, nrow(df_guess)), n.times),] #full empty data frame, with varying numbers of obs per participant
#generate n_major.s values for ea
df_guess_full
#generate n_major.s values for each problem that a participant solves and store in the full data
df_guess_full$n_major.s <- sample(data.c$n_major.s, size = nrow(df_guess_full), replace = TRUE)
nrow(df_guess_full)
#generate empty data frame to store simulated data
df_guess <- data.frame(id = 1:200, competition = c(rep(0, 100), rep(1, 100)),
effort = c(rep(0, 50), rep(1, 50), rep(0, 50), rep(1, 50)),
a_player = NA, a = NA, n_major.s = NA, ElapsedTime_Guess = NA)
#extract number of observations per participant, for effort and no effort conditions
g_num_e <- aggregate(Guess_Number ~ ID_Player, data=data.c[data.c$Effort==1,], FUN=max)
g_num_e <- g_num_e$Guess_Number
g_num_noe <- aggregate(Guess_Number ~ ID_Player, data=data.c[data.c$Effort==0,], FUN=max)
g_num_noe <- g_num_noe$Guess_Number
#extract samples from posterior for all parameters
post <- extract.samples(m.1.b)
#generate multiple observations per participant
df_guess$nobs <- NA
#separate data frames into effort and no effort
df_guess_e <- df_guess[df_guess$effort==0,]
df_guess_noe <- df_guess[df_guess$effort==1,]
#repeat observations in effort and no effort conditions based on number of observations in original data set
df_guess_e$nobs <- sample(g_num_e, size = nrow(df_guess_e), replace = TRUE)
df_guess_noe$nobs <- sample(g_num_noe, size = nrow(df_guess_noe), replace = TRUE)
df_guess <- rbind(df_guess_e, df_guess_noe)
n.times <- df_guess$nobs
df_guess_full <- df_guess[rep(seq(1, nrow(df_guess)), n.times),] #full empty data frame, with varying numbers of obs per participant
#generate n_major.s values for each problem that a participant solves and store in the full data
df_guess_full$n_major.s <- sample(data.c$n_major.s, size = nrow(df_guess_full), replace = TRUE)
#generate global intercept values
for(i in 1:nrow(df_guess_full)){
df_guess_full$a[i] <- post$a[i]
}
tail(df_guess_full)
sample(1:ncol(post$a_player), size = 1)
a
nrow(a)
post$a_player[1:nrow(a),unique_int]
#generate empty data frame to store simulated data
df_guess <- data.frame(id = 1:200, competition = c(rep(0, 100), rep(1, 100)),
effort = c(rep(0, 50), rep(1, 50), rep(0, 50), rep(1, 50)),
a_player = NA, a = NA, n_major.s = NA, ElapsedTime_Guess = NA)
#extract number of observations per participant, for effort and no effort conditions
g_num_e <- aggregate(Guess_Number ~ ID_Player, data=data.c[data.c$Effort==1,], FUN=max)
g_num_e <- g_num_e$Guess_Number
g_num_noe <- aggregate(Guess_Number ~ ID_Player, data=data.c[data.c$Effort==0,], FUN=max)
g_num_noe <- g_num_noe$Guess_Number
#extract samples from posterior for all parameters
post <- extract.samples(m.1.b)
#generate multiple observations per participant
df_guess$nobs <- NA
#separate data frames into effort and no effort
df_guess_e <- df_guess[df_guess$effort==0,]
df_guess_noe <- df_guess[df_guess$effort==1,]
#repeat observations in effort and no effort conditions based on number of observations in original data set
df_guess_e$nobs <- sample(g_num_e, size = nrow(df_guess_e), replace = TRUE)
df_guess_noe$nobs <- sample(g_num_noe, size = nrow(df_guess_noe), replace = TRUE)
df_guess <- rbind(df_guess_e, df_guess_noe)
n.times <- df_guess$nobs
df_guess_full <- df_guess[rep(seq(1, nrow(df_guess)), n.times),] #full empty data frame, with varying numbers of obs per participant
#generate n_major.s values for each problem that a participant solves and store in the full data
df_guess_full$n_major.s <- sample(data.c$n_major.s, size = nrow(df_guess_full), replace = TRUE)
#generate global intercept values
for(i in 1:nrow(df_guess_full)){
df_guess_full$a[i] <- post$a[i]
}
#generate intercept values for each player
df_guess_list <- list()
for(i in 1:200) {
#subset data set for each unique participant
a <- df_guess_full[df_guess_full$id==i,]
#generate unique intercept values for that participant
unique_int <- sample(1:ncol(post$a_player), size = 1)
intercepts <- post$a_player[1:nrow(a),unique_int]
a$a_player <- intercepts
df_guess_list[[i]] <- a
}
#combine into full data set
df_guess_full <- do.call(rbind, df_guess_list)
#generate simulated data for all 200 participants, for the probability that they get each problem correct
df_guess_full$probc <- NA
for(i in 1:nrow(df_guess_full)) {
df_guess_full$ElapsedTime_Guess[i] <- df_guess_full$a[i] + df_guess_full$a_player[i] + post$bC[i]*df_guess_full$competition[i] +
post$bE[i]*df_guess_full$effort[i] + post$bCE[i]*df_guess_full$competition[i]*df_guess_full$effort[i] +
post$bNs[i]*df_guess_full$n_major.s[i]
}
#analyze data
df <- df_guess_full[,c("id", "competition", "effort", "n_major.s", "ElapsedTime_Guess")]
hist(df$ElapsedTime_Guess)
str(df_guess_full)
unique(df_guess_full$id)
#generate empty data frame to store simulated data
df_guess <- data.frame(id = 1:200, competition = c(rep(0, 100), rep(1, 100)),
effort = c(rep(0, 50), rep(1, 50), rep(0, 50), rep(1, 50)),
a_player = NA, a = NA, n_major.s = NA, ElapsedTime_Guess = NA)
#extract number of observations per participant, for effort and no effort conditions
g_num_e <- aggregate(Guess_Number ~ ID_Player, data=data.c[data.c$Effort==1,], FUN=max)
g_num_e <- g_num_e$Guess_Number
g_num_noe <- aggregate(Guess_Number ~ ID_Player, data=data.c[data.c$Effort==0,], FUN=max)
g_num_noe <- g_num_noe$Guess_Number
#extract samples from posterior for all parameters
post <- extract.samples(m.1.b)
#generate multiple observations per participant
df_guess$nobs <- NA
#separate data frames into effort and no effort
df_guess_e <- df_guess[df_guess$effort==0,]
df_guess_noe <- df_guess[df_guess$effort==1,]
#repeat observations in effort and no effort conditions based on number of observations in original data set
df_guess_e$nobs <- sample(g_num_e, size = nrow(df_guess_e), replace = TRUE)
df_guess_noe$nobs <- sample(g_num_noe, size = nrow(df_guess_noe), replace = TRUE)
df_guess <- rbind(df_guess_e, df_guess_noe)
n.times <- df_guess$nobs
df_guess_full <- df_guess[rep(seq(1, nrow(df_guess)), n.times),] #full empty data frame, with varying numbers of obs per participant
#generate n_major.s values for each problem that a participant solves and store in the full data
df_guess_full$n_major.s <- sample(data.c$n_major.s, size = nrow(df_guess_full), replace = TRUE)
#generate global intercept values
for(i in 1:nrow(df_guess_full)){
df_guess_full$a[i] <- post$a[i]
}
#generate intercept values for each player
df_guess_list <- list()
for(i in 1:200) {
#subset data set for each unique participant
a <- df_guess_full[df_guess_full$id==i,]
#generate unique intercept values for that participant
unique_int <- sample(1:ncol(post$a_player), size = 1)
intercepts <- post$a_player[1:nrow(a),unique_int]
a$a_player <- intercepts
df_guess_list[[i]] <- a
}
#combine into full data set
df_guess_full <- do.call(rbind, df_guess_list)
for(i in 1:nrow(df_guess_full)) {
df_guess_full$ElapsedTime_Guess[i] <-
df_guess_full$a[i] + df_guess_full$a_player[i] + post$bC[i]*df_guess_full$competition[i] +
post$bE[i]*df_guess_full$effort[i] + post$bCE[i]*df_guess_full$competition[i]*df_guess_full$effort[i] +
post$bNs[i]*df_guess_full$n_major.s[i]
}
hist(df_guess_full$ElapsedTime_Guess)
#subset data frame for analysis
df <- df_guess_full[,c("id", "competition", "effort", "n_major.s", "Correct_Guess")]
#subset data frame for analysis
df <- df_guess_full[,c("id", "competition", "effort", "n_major.s", "ElapsedTime_Guess")]
m.1.power <- map2stan(
alist(
ElapsedTime_Guess ~ dnorm(mu, sigma),
mu <- a + a_player[ID_Player] + bC*Competition + bE*Effort + bCE*Competition*Effort + bNs*n_major.s,
bC ~ dnorm(0, 10),
bE ~ dnorm(0, 30),
bCE ~ dnorm(0, 10),
bNs ~ dnorm(0, 10),
a ~ dgamma(1.5, 0.05),
a_player[ID_Player] ~ dnorm(0, sigma_player),
sigma_player ~ dgamma(1.5, 0.05),
sigma ~ dgamma(2, 0.5)
), data=df, iter=5000, warmup=1000, chains = 1, cores = 4)
m.1.power <- map2stan(
alist(
ElapsedTime_Guess ~ dnorm(mu, sigma),
mu <- a + a_player[id] + bC*competition + bE*effort + bCE*competition*effort + bNs*n_major.s,
bC ~ dnorm(0, 10),
bE ~ dnorm(0, 30),
bCE ~ dnorm(0, 10),
bNs ~ dnorm(0, 10),
a ~ dgamma(1.5, 0.05),
a_player[ID_Player] ~ dnorm(0, sigma_player),
sigma_player ~ dgamma(1.5, 0.05),
sigma ~ dgamma(2, 0.5)
), data=df, iter=5000, warmup=1000, chains = 1, cores = 4)
m.1.power <- map2stan(
alist(
ElapsedTime_Guess ~ dnorm(mu, sigma),
mu <- a + a_player[id] + bC*competition + bE*effort + bCE*competition*effort + bNs*n_major.s,
bC ~ dnorm(0, 10),
bE ~ dnorm(0, 30),
bCE ~ dnorm(0, 10),
bNs ~ dnorm(0, 10),
a ~ dgamma(1.5, 0.05),
a_player[ID_Player] ~ dnorm(0, sigma_player),
sigma_player ~ dgamma(1.5, 0.05),
sigma ~ dgamma(2, 0.5)
), data=df, iter=5000, warmup=1000, chains = 1, cores = 1)
m.1.power <- map2stan(
alist(
ElapsedTime_Guess ~ dnorm(mu, sigma),
mu <- a + a_player[id] + bC*competition + bE*effort + bCE*competition*effort + bNs*n_major.s,
bC ~ dnorm(0, 10),
bE ~ dnorm(0, 30),
bCE ~ dnorm(0, 10),
bNs ~ dnorm(0, 10),
a ~ dgamma(1.5, 0.05),
a_player[id] ~ dnorm(0, sigma_player),
sigma_player ~ dgamma(1.5, 0.05),
sigma ~ dgamma(2, 0.5)
), data=df, iter=5000, warmup=1000, chains = 1, cores = 4)
hist(df$ElapsedTime_Guess)
head(df)
hist(df$ElapsedTime_Guess[df$competition==0,]
)
hist(df$ElapsedTime_Guess[df$competition==0,])
hist(df$ElapsedTime_Guess[df$competition==1,])
unique(df$competition)
mean(df$ElapsedTime_Guess[df$competition==1,])
2 + 2
mean(df$ElapsedTime_Guess)
mean(df$ElapsedTime_Guess[df$competition==0])
mean(df$ElapsedTime_Guess[df$competition==1])
hist(df$ElapsedTime_Guess[df$competition==1])
hist(df$ElapsedTime_Guess[df$competition==0])
hist(df$ElapsedTime_Guess[df$competition==1])
m.1.power <- map2stan(
alist(
ElapsedTime_Guess ~ dnorm(mu, sigma),
mu <- a + a_player[id] + bC*competition + bE*effort + bCE*competition*effort + bNs*n_major.s,
bC ~ dnorm(0, 10),
bE ~ dnorm(0, 30),
bCE ~ dnorm(0, 10),
bNs ~ dnorm(0, 10),
a ~ dgamma(1.5, 0.05),
a_player[id] ~ dnorm(0, sigma_player),
sigma_player ~ dgamma(1.5, 0.05),
sigma ~ dgamma(2, 0.5)
), data=df, iter=5000, warmup=1000, chains = 1, cores = 1)
setwd("~/Dropbox/Research Projects/Project10_Comp_Science_Shared/RegisteredReport/Shared/Analysis_Data_For_Submission/CompetitionPriority_RR_Github")
load("~/Dropbox/Research Projects/Project10_Comp_Science_Shared/RegisteredReport/Shared/Analysis_Data_For_Submission/CompetitionPriority_RR_Github/Pilot_Analysis_Full.RData")
post <- extract.samples(m.1.b)
post <- post[[-2]]
post <- post[-2]
post <- extract.samples(m.1.b)
post <- post[-"a"]
post["a"]
post["a"] <- NULL
post <- extract.samples(m.1.b)
post_a_player <- post["a_player"]
post["a_player"] <- NULL
post[1,]
post[1]
post[[1]]
post[[,1]]
post[[]]
post[post[1,]]
lapply(post, function(a), a[1])
lapply(post, function(a) a[1])
nrow(post)
nrow(post$a)
sample(1:nrow(post$a), 1)
sample(1:nrow(post$a), 1)
sample(1:nrow(post$a), 1)
sample(1:nrow(post$a), 1)
sample(1:nrow(post$a), 1)
sample(1:nrow(post$a), 1)
sample(1:nrow(post$a), 1)
sample(1:nrow(post$a), 1)
ran_nums <- sample(1:nrow(post$a), nrow(post$a), replace = TRUE)
ran_pos <- sample(1:nrow(post$a), nrow(post$a), replace = TRUE)
lapply(post, function(a) a[ran_pos])
str(post_a_player)
post_a_player[,47]
post_a_player$a_player[,47]
ncol(post_a_player$a_player)
post_a_player$a_player[2,47]
post_a_player$a_player[c(2, 3),47]
for(i in 1:ncol(post_a_player$a_player)) {
post_a_player$a_player[,i] <- post_a_player$a_player[ran_pos,i]
}
for(i in 1:ncol(post_a_player$a_player)) {
post_a_player$a_player[,i] <- post_a_player$a_player[ran_pos,i]
}
1+length(post)
#add post_a_player back into post
post[[1+length(post)]] <- post_a_player$a_player
#add post_a_player back into post
post[[1+length(post)]]$a_player <- post_a_player$a_player
1+length(post)
#add post_a_player back into post
open_spot <- 1+length(post)
post[[open_spot]] <- post_a_player$a_player
names(post)
names(post[[open_spot]])
names(post[[2]])
names(post[2])
names(post[open_spot])
names(post[open_spot]) <- "a_player"
names(post[open_spot])
names(post[open_spot])
names(post[open_spot])
names(post[open_spot]) <- c("poo")
names(post) <- c("poo")
names(post[[8]]) <- c("poo")
names(post)
names(post[[8]])
post_a_player
post <- extract.samples(m.1.b)
post_a_player <- post["a_player"] # just samples for intercept values for each player
post["a_player"] <- NULL #updates post to not include intercept values
#shuffle samples in post
ran_pos <- sample(1:nrow(post$a), nrow(post$a), replace = TRUE)
post <- lapply(post, function(a) a[ran_pos])
#shuffle samples in post_a_player
for(i in 1:ncol(post_a_player$a_player)) {
post_a_player$a_player[,i] <- post_a_player$a_player[ran_pos,i]
}
#add post_a_player back into post
open_spot <- 1+length(post)
post[[open_spot]] <- post_a_player
post <- extract.samples(m.1.b)
post_a_player <- post["a_player"] # just samples for intercept values for each player
post["a_player"] <- NULL #updates post to not include intercept values
#shuffle samples in post
ran_pos <- sample(1:nrow(post$a), nrow(post$a), replace = TRUE)
post <- lapply(post, function(a) a[ran_pos])
#shuffle samples in post_a_player
for(i in 1:ncol(post_a_player$a_player)) {
post_a_player$a_player[,i] <- post_a_player$a_player[ran_pos,i]
}
#add post_a_player back into post
open_spot <- 1+length(post)
post[[open_spot]] <- post_a_player$a_player
names(post)
names(post)[8]
names(post)[8] <- "kaka"
post <- extract.samples(m.1.b)
post_a_player <- post["a_player"] # just samples for intercept values for each player
post["a_player"] <- NULL #updates post to not include intercept values
#shuffle samples in post
ran_pos <- sample(1:nrow(post$a), nrow(post$a), replace = TRUE)
post <- lapply(post, function(a) a[ran_pos])
#shuffle samples in post_a_player
for(i in 1:ncol(post_a_player$a_player)) {
post_a_player$a_player[,i] <- post_a_player$a_player[ran_pos,i]
}
#add post_a_player back into post
open_spot <- 1+length(post)
post[[open_spot]] <- post_a_player$a_player
names(post)[open_spot] <- "a_player"
post <- extract.samples(m.1.b)
post_a_player <- post["a_player"] # just samples for intercept values for each player
post["a_player"] <- NULL #updates post to not include intercept values
#shuffle samples in post
ran_pos <- sample(1:nrow(post$a), nrow(post$a), replace = TRUE)
post <- lapply(post, function(a) a[ran_pos])
#shuffle samples in post_a_player
for(i in 1:ncol(post_a_player$a_player)) {
post_a_player$a_player[,i] <- post_a_player$a_player[ran_pos,i]
}
#add post_a_player back into post
open_spot <- 1+length(post)
open_spot
post[[open_spot]] <- post_a_player$a_player
names(post)[open_spot] <- "a_player"
